#### 介绍
文档结构，是构建整个文档的基础，它就像房屋的墙壁和脊梁柱，如果没有它们，就算你有再多的豪华家私，也毫无用武之地。

#### 结构分析
现在我们来看一段代码，以及它在`Rexjs`解析后的不同文档结构示意图。

* **源码**

这是一段打乱格式的代码，但是并无语法错误。

```js
var
a
=   b
```

* **`Rexjs`解析后的代码**

解析后，空格会被压缩，也会根据语法（`ASI`机制），自动加上分号。

```js
var a=b;
```

* **`Rexjs`解析后的文档结构平面示意图**

平面图解，能较好的诠释文档结构，十分明朗，属于中规中矩的一种诠释方式。

```txt
    ┌--------------------------------- 全局语句块 
┌---┴------------------------------┐
|                                  |
|   ┌--------------------------------- 文件起始语句
|   |                              |
|   |    ┌---------------------------- var 语句
|  -┴-   |                         |
|    ┌---┴--------------------┐    |
|    |       var a = b;       |    |
|    |       -┬-------        |    |
|    |        └----------------------- var 表达式
|    |           —┬———        |    |
|    |            └------------------- 二元运算表达式
|    |                        |    |
|    |           └ - ┴---------------- 标识符表达式
|    └------------------------┘    |
|  -┬-                             |
|   └--------------------------------- 文件结束语句
|                                  |
└----------------------------------┘
```

* **`Rexjs`解析后的文档结构`XML`形式示意图**

最基本`Web`形式的诠释，文档结构、文档层级均一目了然，专属于码农的一种诠释方式！

```html
<全局语句块>
	<文件起始语句>
		<文件起始表达式 />
	</文件起始语句>
	<!-- 其他语句 -->
	<var语句>
		<var表达式>
			var
			<二元表达式>
				<标识符表达式>a</标识符表达式>
				=
				<标识符表达式>b</标识符表达式>
			</二元表达式>
			<!-- 其他二元表达式 -->
		</var表达式>
	</var语句>
	<!-- 其他语句 -->
	<文件结束语句>
		<文件结束表达式 />
	</文件结束语句>
</全局语句块>
```

* **最后，我们附上`Rexjs`解析后的实际文档结构代码示意图**

语法解析后，相关的内容比较复杂，是开发时所需使用到的文档结构，对于非开发人员，属于较难理解的一种诠释方式。

![示例图](doc/theory/image/structure.png)

#### 包含关系

其实，一个`js`文件的组成很简单，无非是由“文件始末位置”、“语句块”、“语句”、“表达式”组成，接下来我们看看更细化的关系结构：

1. 一个`js`文件：只包含一个“[语句块](/#!/book/theory/statements.md)”，即“全局语句块”；
2. 一个[**语句块**](/#!/book/theory/statements.md)：又称“语句列表”、“语句集合”等，顾名思义，它是用来包含若干个"[语句](/#!/book/theory/statement.md)"的，如“全局语句块”则包含“文件起始语句”、“全局语句块主体语句集合”及“文件结束语句”；
3. 一个[**语句**](/#!/book/theory/statement.md)：只包含一个主“[表达式](/#!/book/theory/expression.md)”，如“`var`语句”只包含了一个“`var`表达式”；
4. 一个[**表达式**](/#!/book/theory/expression.md)：必包含一个“语法上下文”（下图中表达式的`context`属性）、“表达式状态”（下图中表达式的`state`属性），以及可能包含一个或多个子表达式；
5. 一个**语法上下文**：必分别包含一个“语法标签”、“语法内容”及“文档位置”。

以上这些因素，我们称之为“语法元素”，`Rexjs`就是依赖着这些因素来解析文档的，万变不离其宗！